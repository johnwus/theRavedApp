name: RAvED Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # Backend Services Build and Test
  backend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          user-service,
          social-service,
          ecommerce-service,
          content-service,
          notification-service,
          analytics-service,
          realtime-service
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests for ${{ matrix.service }}
      run: |
        cd server/${{ matrix.service }}
        mvn clean test -B

    - name: Build ${{ matrix.service }}
      run: |
        cd server/${{ matrix.service }}
        mvn clean compile -B

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests - ${{ matrix.service }}
        path: server/${{ matrix.service }}/target/surefire-reports/*.xml
        reporter: java-junit

  # Frontend Build and Test
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      run: |
        cd client
        npm ci

    - name: Run linting
      run: |
        cd client
        npm run lint

    - name: Run tests
      run: |
        cd client
        npm run test:ci

    - name: Build frontend
      run: |
        cd client
        npm run build

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Code Quality Analysis
  code-quality:
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        cd server
        mvn clean verify sonar:sonar \
          -Dsonar.projectKey=raved-platform \
          -Dsonar.organization=raved \
          -Dsonar.host.url=https://sonarcloud.io

  # Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [
          user-service,
          social-service,
          ecommerce-service,
          content-service,
          notification-service,
          analytics-service,
          realtime-service
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./server/${{ matrix.service }}
        push: true
        tags: |
          raved/${{ matrix.service }}:latest
          raved/${{ matrix.service }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add deployment commands here

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan, code-quality]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add deployment commands here

  # Create GitHub Issues for Failed Jobs
  create-issues:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan, code-quality]
    if: failure()
    
    steps:
    - name: Create issue for failed CI/CD
      uses: actions/github-script@v7
      with:
        script: |
          const title = `CI/CD Pipeline Failed - ${context.workflow} #${context.runNumber}`;
          const body = `
          ## CI/CD Pipeline Failure
          
          **Workflow:** ${context.workflow}
          **Run Number:** ${context.runNumber}
          **Commit:** ${context.sha}
          **Branch:** ${context.ref}
          **Actor:** ${context.actor}
          
          **Failed Jobs:**
          ${context.payload.workflow_run?.conclusion === 'failure' ? '- Build and Test' : ''}
          
          **Action Required:**
          - Review the failed workflow run
          - Fix any issues identified
          - Re-run the pipeline
          
          **Links:**
          - [Failed Workflow Run](${context.payload.workflow_run?.html_url})
          - [Commit](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'ci/cd', 'high-priority']
          });
