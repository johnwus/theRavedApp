name: Server CI/CD

on:
  push:
    branches: [main, develop]
    paths: ['server/**']
  pull_request:
    branches: [main, develop]
    paths: ['server/**']

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: raved_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      working-directory: ./server
      run: |
        mvn clean test \
          -Dspring.datasource.url=jdbc:postgresql://localhost:5432/raved_test \
          -Dspring.datasource.username=test_user \
          -Dspring.datasource.password=test_pass \
          -Dspring.redis.host=localhost \
          -Dspring.redis.port=6379

    - name: Generate test report
      working-directory: ./server
      run: mvn surefire-report:report-only

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: server/**/target/surefire-reports/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./server/target/site/jacoco/jacoco.xml
        flags: server

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Run OWASP Dependency Check
      working-directory: ./server
      run: mvn org.owasp:dependency-check-maven:check

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: server/target/dependency-check-report.html

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Build application
      working-directory: ./server
      run: mvn clean package -DskipTests

    - name: Build Docker images
      working-directory: ./server
      run: |
        # Build all service images
        docker build -t johnwus/raved-user-service:latest ./user-service
        docker build -t johnwus/raved-content-service:latest ./content-service
        docker build -t johnwus/raved-social-service:latest ./social-service
        docker build -t johnwus/raved-realtime-service:latest ./realtime-service
        docker build -t johnwus/raved-ecommerce-service:latest ./ecommerce-service
        docker build -t johnwus/raved-notification-service:latest ./notification-service
        docker build -t johnwus/raved-analytics-service:latest ./analytics-service
        docker build -t johnwus/raved-api-gateway:latest ./api-gateway
        docker build -t johnwus/raved-config-server:latest ./config-server
        docker build -t johnwus/raved-eureka-server:latest ./eureka-server

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker images
      run: |
        docker push johnwus/raved-user-service:latest
        docker push johnwus/raved-content-service:latest
        docker push johnwus/raved-social-service:latest
        docker push johnwus/raved-realtime-service:latest
        docker push johnwus/raved-ecommerce-service:latest
        docker push johnwus/raved-notification-service:latest
        docker push johnwus/raved-analytics-service:latest
        docker push johnwus/raved-api-gateway:latest
        docker push johnwus/raved-config-server:latest
        docker push johnwus/raved-eureka-server:latest

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: server-jars
        path: server/**/target/*.jar