server:
  port: 8086

spring:
  application:
    name: notification-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}

# =============================================================================
# RAVED CONFIGURATION
# =============================================================================
raved:
  service:
    name: notification-service
  database:
    environment: ${SPRING_PROFILES_ACTIVE:local}

# =============================================================================
# PROFILE-SPECIFIC CONFIGURATIONS
# =============================================================================

---
# LOCAL DEVELOPMENT PROFILE
spring:
  profiles: local
  datasource:
    url: ${NOTIFICATION_SERVICE_SERVICE_DB_URL:jdbc:postgresql://localhost:5432/raved_notification_service_db}
    username: ${DATABASE_USERNAME:raved_user}
    password: ${DATABASE_PASSWORD:raved_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      leak-detection-threshold: 60000
      pool-name: RavedHikariPool-Notificationservice-Local
  jpa:
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
  redis:
    host: redis
    port: 6379
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
  kafka:
    bootstrap-servers: kafka:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 1
      buffer-memory: 33554432
    consumer:
      group-id: notification-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      enable-auto-commit: true
      auto-commit-interval: 1000
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME:your-email@gmail.com}
    password: ${MAIL_PASSWORD:your-app-password}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          connectiontimeout: 5000
          timeout: 3000
          writetimeout: 5000
    from: ${MAIL_FROM:noreply@raved.app}

eureka:
  client:
    service-url:
      defaultZone: http://eureka-server:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

logging:
  level:
    com.raved: INFO
    org.springframework: WARN
    org.hibernate: WARN
    org.apache.kafka: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Kafka Topics Configuration
kafka:
  topics:
    notification-events: notification-events
    user-events: user-events
    social-events: social-events
    ecommerce-events: ecommerce-events
  consumer:
    group-id: notification-service

# Firebase Configuration (for push notifications)
firebase:
  config-path: ${FIREBASE_CONFIG_PATH:classpath:firebase-service-account.json}
  database-url: ${FIREBASE_DATABASE_URL:https://your-project.firebaseio.com}

# SMS Configuration (Twilio)
twilio:
  account-sid: ${TWILIO_ACCOUNT_SID:your-account-sid}
  auth-token: ${TWILIO_AUTH_TOKEN:your-auth-token}
  phone-number: ${TWILIO_PHONE_NUMBER:+1234567890}

# Application Configuration
app:
  name: RAvED
  url: https://app.raved.com
  support-email: support@raved.app

---
# STAGING PROFILE (Neon Cloud)
spring:
  profiles: staging
  datasource:
    url: ${NOTIFICATION_SERVICE_SERVICE_DB_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 15
      minimum-idle: 5
      idle-timeout: 600000
      connection-timeout: 30000
      leak-detection-threshold: 60000
      pool-name: RavedHikariPool-Notificationservice-Staging
      connection-init-sql: SELECT 1
  jpa:
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
        connection:
          provider_disables_autocommit: true
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true

---
# PRODUCTION PROFILE (Neon Cloud)
spring:
  profiles: production
  datasource:
    url: ${NOTIFICATION_SERVICE_SERVICE_DB_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 10
      idle-timeout: 600000
      connection-timeout: 30000
      leak-detection-threshold: 60000
      pool-name: RavedHikariPool-Notificationservice-Production
      connection-init-sql: SELECT 1
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
  jpa:
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        jdbc:
          batch_size: 30
        order_inserts: true
        order_updates: true
        connection:
          provider_disables_autocommit: true
        cache:
          use_second_level_cache: true
          use_query_cache: true
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true

# =============================================================================
# NOTIFICATION SERVICE SPECIFIC CONFIGURATION
# =============================================================================
spring:
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: notification-service
      auto-offset-reset: earliest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

# =============================================================================
# COMMON MICROSERVICE CONFIGURATION
# =============================================================================
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka/}
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

logging:
  level:
    com.raved: ${LOG_LEVEL:DEBUG}
  file:
    name: ${LOG_FILE_PATH:./logs}/${spring.application.name}.log
